#!/usr/bin/python

# LSST FITS Header Conformance Tools
# Opens a file (or set of files) written by UCDavis
# Optical Simulator and modifes the 
# header to conform to LSST EO Test data standards
# Craig Lage 8-Jan-15 copied from Peter Doherty at Harvard
# and modified.
# Added crosstalk subtraction 21-Aug-15 Craig Lage


from pylab import *
import pyfits as pf
import sys
import subprocess
import warnings


###########################################################################
###########################################################################
# This ignores an annoying deprecation warning.  Will fix later.
#warnings.simplefilter("ignore")

def crosstalk_subtract(infile, newfile):

    print 'Performing crosstalk subtraction on FITS file :', infile
    # The crosstalk matrix below was calculated from spot images on 22-Jun-16
    
    ct_matrix = zeros([16,16])

    # ITL-3800C-033 with active ribbon cables:
    ct_matrix = array([
[ +1.000000, +0.000288, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000355, +1.000000, +0.000264, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000355, +1.000000, +0.000394, +0.000140, +0.000104, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000505, +1.000000, +0.000286, +0.000151, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000188, +1.000000, +0.000420, +0.000145, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000149],
[ +0.000000, +0.000000, +0.000000, +0.000139, +0.000450, +1.000000, +0.000480, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000273, +0.000476, +1.000000, +0.000345, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000105, +0.000153, +0.000363, +1.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000284],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +1.000000, +0.000369, +0.000151, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000479, +1.000000, +0.000529, +0.000177, +0.000000, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000223, +0.000530, +1.000000, +0.000868, +0.000170, +0.000000, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000147, +0.000668, +1.000000, +0.000274, +0.000108, +0.000000, +0.000000],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000137, +0.000268, +0.000332, +1.000000, +0.000804, +0.000000, +0.000419],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000101, +0.000189, +0.000304, +1.000000, +0.000310, +0.000363],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000148, +0.000000, +0.000000, +0.000447, +1.000000, +0.001700],
[ +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000000, +0.000146, +0.001154, +1.000000]])

    """
    114-04 with active ribbon cables
    ct_matrix = array([[ +1.0000, +0.0142, +0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, -0.0001, -0.0003, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0157, +1.0000, +0.0004, +0.0000, -0.0001, +0.0000, +0.0000, +0.0000, -0.0002, -0.0004, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0005, +1.0000, +0.0077, -0.0001, +0.0000, +0.0000, +0.0000, -0.0002, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, -0.0002],
 [ +0.0000, +0.0000, +0.0079, +1.0000, -0.0002, +0.0000, +0.0000, +0.0000, -0.0001, -0.0002, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0002, +1.0000, +0.0076, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0090, +1.0000, +0.0002, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ -0.0001, +0.0000, +0.0000, +0.0000, -0.0001, +0.0004, +1.0000, +0.0070, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0000, -0.0002, +0.0000, +0.0069, +1.0000, -0.0002, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +1.0000, +0.0005, +0.0002, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0004, +0.0000, +0.0000, +0.0000, +0.0006, +1.0000, +0.0007, +0.0000, +0.0001, +0.0000, +0.0000, +0.0002],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0002, +0.0011, +1.0000, +0.0006, +0.0001, +0.0000, +0.0000, +0.0000],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0002, +0.0007, +1.0000, +0.0002, +0.0000, +0.0000, +0.0001],
 [ +0.0000, +0.0000, -0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0002, +0.0007, +0.0004, +0.0005, +1.0000, +0.0006, +0.0000, +0.0002],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0001, +0.0000, +0.0000, +0.0000, +0.0000, +0.0001, +0.0001, +0.0002, +0.0004, +1.0000, +0.0002, +0.0003],
 [ +0.0000, +0.0000, +0.0000, +0.0000, -0.0003, +0.0000, +0.0000, +0.0000, +0.0000, +0.0002, +0.0002, +0.0001, +0.0000, +0.0004, +1.0000, +0.0010],
 [ +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0000, +0.0001, +0.0011, +1.0000]])

"""


    # copy the file
    command = 'cp '+infile+' '+newfile
    copyfile = subprocess.Popen(command, shell=True)
    subprocess.Popen.wait(copyfile)

    # open the file
    # do_not_scale_image_data=True is important so as not to mess up the data format.
    # checksum=True is required to calculate the checksums and datasums
    hdulist = pf.open(newfile, mode='update', do_not_scale_image_data=True)
    
    ###########################################################################
    # fix up the various image extensions
    
    # First the overscan subtraction.
    ov_data = []
    for i in range(1,17) :
        data = np.array(hdulist[i].data + 32768, dtype = np.int32)
        overscan = data[2005:2021,:].sum(axis=0) / 16.0
        ov_data.append(np.clip((data-overscan), 0, 65536))

    # Next the crosstalk subtraction.
    newdata = []
    for i in range(1,17) :
        data = np.array(hdulist[i].data + 32768, dtype = np.int32)
        for j in range(1,17):
            if i == j or ct_matrix[i-1,j-1] < 1.0E-9:
                continue
            data = data - ct_matrix[i-1,j-1] * ov_data[j-1]
        newdata.append(np.clip(data, 0, 65536))
    for i in range(1,17) :
        hdulist[i].data = np.array(newdata[i-1] - 32768, dtype=np.int16)
        # Data is stored as unsigned 16 bit integers, so we need to apply this transformation
        # in order to calculate the mean and std deviation.
    
    # finished. Close file.
    hdulist.close(output_verify='ignore')

    print 'FITS file conversion done.'

    return

##########################################################################

infile = sys.argv[1]
newfile = infile.split('.fits')[0]+'_ct.fits'
crosstalk_subtract(infile, newfile)
